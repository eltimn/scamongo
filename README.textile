*NOTICE:* 

The Scamongo project is now officially part of the "Lift (Lift Web Framework) ":http://github.com/dpp/liftweb project. It is currently available in the snapshot repo and will be included in the upcoming M5 milestone.

More information available on the Lift Wiki at:
"https://www.assembla.com/wiki/show/liftweb/MongoDB":https://www.assembla.com/wiki/show/liftweb/MongoDB

See wiki for project info.

To build you will need to use sbt 
http://code.google.com/p/simple-build-tool/

Jar is available at:
http://dl.dropbox.com/u/1154284/scamongo-0.1.jar
http://dl.dropbox.com/u/1154284/scamongo-0.1.1.jar
http://dl.dropbox.com/u/1154284/scamongo-0.1.2.jar
http://dl.dropbox.com/u/1154284/scamongo-0.1.3.jar

h2. Release Notes

*version-0.1.3*
* Updated for use with mongo-java-driver 1.4 and lift 2.0-M4

NOTE: There is a small breaking change in this version for scamongo-record users;
record companion objects must now include a createRecord method. Here's an example:

class TestRecord extends MongoRecord[TestRecord] with MongoId[TestRecord] {

	def meta = TestRecord

	object stringfield extends StringField(this, 32)
}

object TestRecord extends TestRecord with MongoMetaRecord[TestRecord] {
	def createRecord = new TestRecord
}

*version-0.1.2*

* Added harryh's changes to DBRef
* Added delete method that takes DBObject as input.

*version-0.1.1*

* Updated for use with mongo-java-driver 1.3 and lift 2.0-M3
* Modified ensureIndex methods
* Added support for optional_? fields [1] - If optional_? == true the field will not be included in the DBObject
* Fixed StringField validators to align with new arg type [1]
* Changed internals to align with Ross' fromOther and asOther paradigm [2]
* Removed MapParser

[1] http://groups.google.com/group/liftweb/browse_thread/thread/42183cb100176f1e/f916dce6a459fdd0?lnk=gst&q=record+option#f916dce6a459fdd0
[2] http://groups.google.com/group/liftweb/browse_thread/thread/5c0735fc0d5f6250#

*version-0.1*

* First public release

h2. Todo/Notes

General
* eval ?
* query DSL: By, In, >=, etc.
* Boolean, Date query examples 
* master/slave, replication
* MongoAuth example
* Test all data types
* Binary support
* cursor vs array

Document
* save, update strict. Return Option.

Record
* String validators & LocaleField.localeList
* callbacks, before/after update, before/after insert
* runSafe, try-catch
* ListField (JsonObjectListField)
* saveStrict, updateStrict methods
* useSession example
* PasswordField
* CaseClassField
* MongoRefField fetch
